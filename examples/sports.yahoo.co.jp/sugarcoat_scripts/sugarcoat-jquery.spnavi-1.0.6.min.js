var spnavi;
{
    const $___mock_97e7975a796cb1d9 = {};
    (exports => {
        'use strict';
        let isSealed = false;
        class Storage {
            constructor() {
                if (isSealed) {
                    throw new TypeError('Illegal constructor');
                }
            }
            get length() {
                return Object.keys(this).length;
            }
            key(index) {
                const keys = Object.keys(this);
                if (index < 0 || index >= keys.length) {
                    return null;
                }
                return keys[index];
            }
            getItem(key) {
                return Object.prototype.hasOwnProperty.call(this, key) ? this[key] : null;
            }
            setItem(key, value) {
                this[key] = String(value);
            }
            removeItem(key) {
                delete this[key];
            }
            clear() {
                const keys = Object.keys(this);
                for (const key of keys) {
                    delete this[key];
                }
            }
        }
        exports.Storage = {
            configurable: true,
            enumerable: true,
            value: Storage,
            writable: true
        };
        const localStorage = new Storage();
        exports.localStorage = {
            configurable: true,
            enumerable: true,
            get() {
                return localStorage;
            }
        };
        const sessionStorage = new Storage();
        exports.sessionStorage = {
            configurable: true,
            enumerable: true,
            get() {
                return sessionStorage;
            }
        };
        isSealed = true;
    })($___mock_97e7975a796cb1d9);
    (function () {
        var $___var_097925150e85e72f = {};
        spnavi = $___var_097925150e85e72f;
        spnavi.common = {
            getJsonp: function (e, h, d) {
                if (!jQuery || !e) {
                    return false;
                }
                var b = new Date();
                var c = b.getDate();
                var a = b.getHours();
                var f = b.getMinutes();
                var g = '' + c + a + f;
                if (h) {
                    h.jqueryCache = g;
                } else {
                    var h = { jqueryCache: g };
                }
                $.ajax({
                    type: 'GET',
                    url: e,
                    data: h,
                    dataType: 'jsonp',
                    jsonp: 'callback',
                    jsonpCallback: 'spnaviJsonp',
                    cache: true,
                    success: function (i) {
                        d(i);
                    }
                });
            },
            createUri: function (a, d) {
                var c = new Array();
                for (var b in d) {
                    c.push(b + '=' + d[b]);
                }
                if (c.length > 0 && a) {
                    uri = a + '?' + c.join('&');
                }
                return uri;
            },
            escape: function (a) {
                if (!a || typeof a !== 'string') {
                    return '';
                }
                return String(a).replace(/&(?!\w+;)/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&#39;');
            },
            escapeData: function (c) {
                if (!c) {
                    return '';
                }
                var b = typeof c;
                if (b === 'string') {
                    return this.escape(c);
                } else {
                    if (b === 'object') {
                        for (var a in c) {
                            c[a] = this.escapeData(c[a]);
                        }
                        return c;
                    } else {
                        return c;
                    }
                }
            },
            loadPcore: function (b) {
                var a = 'http://i.yimg.jp/images/security/pf/pcore-1.0.1.min.js';
                if (typeof YAHOO == 'undefined') {
                    if (typeof b === 'function') {
                        $.getScript(a, b);
                    } else {
                        $.getScript(a);
                    }
                }
            }
        };
        spnavi.ls = {
            saveKey: '',
            loadKey: '',
            setKey: function (a) {
                if (a) {
                    this.saveKey = a;
                    this.loadKey = a;
                    return true;
                }
                return false;
            },
            getData: function (c, a) {
                if (!a && !(a = this.loadKey)) {
                    return false;
                }
                var b = this.getDataAll(a);
                if (typeof b === 'undefined') {
                    return b;
                } else {
                    if (typeof b[c] !== 'undefined') {
                        return b[c];
                    }
                }
                return false;
            },
            getDataAll: function (a) {
                const $___old_0702968aafd1530b = {}.constructor.getOwnPropertyDescriptor(window, 'localStorage');
                try {
                    if ($___old_0702968aafd1530b)
                        ({}.constructor.defineProperty(window, 'localStorage', $___mock_97e7975a796cb1d9.localStorage));
                    return function () {
                        if (!a && !(a = this.loadKey)) {
                            return false;
                        }
                        var c;
                        var b = window.localStorage.getItem(a);
                        if (typeof b !== null) {
                            c = JSON.parse(b);
                            c = spnavi.common.escapeData(c);
                        } else {
                            c = b;
                        }
                        return c;
                    }.apply(this, arguments);
                } finally {
                    if ($___old_0702968aafd1530b)
                        ({}.constructor.defineProperty(window, 'localStorage', $___old_0702968aafd1530b));
                }
            },
            setData: function (b, c, a) {
                if (!a && !(a = this.saveKey) || typeof b === 'undefined') {
                    return false;
                }
                storedData = this.getDataAll(a);
                if (storedData == false) {
                    storedData = {};
                }
                storedData[c] = b;
                return this._set(storedData, a);
            },
            setDataMulti: function (c, a) {
                if (!a && !(a = this.saveKey) || !c) {
                    return false;
                }
                var b = this.getDataAll(a);
                if (typeof b === 'undefined' || !b) {
                    b = {};
                }
                for (var d in c) {
                    b[d] = c[d];
                }
                return this._set(b, a);
            },
            _set: function (b, c) {
                var a = JSON.stringify(b);
                try {
                    window.localStorage.setItem(c, a);
                } catch (d) {
                    console.log(d);
                    return false;
                }
                return true;
            },
            rmData: function (a, c) {
                if (!c && !(c = this.loadKey)) {
                    return false;
                }
                var b = this.getDataAll(c);
                if (!(b && a)) {
                    return false;
                }
                if (a in b) {
                    delete b[a];
                    this.unsetData(c);
                    return this._set(b, c);
                }
                return false;
            },
            rmDataOldest: function (c) {
                if (!this.getDataAll(c)) {
                    return false;
                }
                var b = this.getDataAll(c);
                for (var a in b) {
                    if (a) {
                        return this.rmData(a, c);
                    }
                }
                return false;
            },
            unsetData: function (a) {
                if (!a) {
                    return false;
                }
                if (window.localStorage.getItem(a)) {
                    localStorage.removeItem(a);
                    return true;
                }
                return false;
            },
            isSet: function (d, a) {
                var c = this.getData(d, a);
                var b = typeof c;
                if (b === 'undefined' || b === false) {
                    return false;
                }
                if (c) {
                    return true;
                }
                return false;
            }
        };
    }())
}